// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagement.Data.Data;

namespace SchoolManagement.Data.Migrations
{
    [DbContext(typeof(SchoolManagementContext))]
    [Migration("20211003220533_Schoolmanagement00007")]
    partial class Schoolmanagement00007
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolManagement.Model.AcademicLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LevelHeadId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AcademicLevel", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AcademicYear", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Class", b =>
                {
                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassCategory")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageStream")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Class", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClassName", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassSubjectTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectTeacherId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("ClassSubjectTeacher", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTeacher", b =>
                {
                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassNameId", "AcademicLevelId", "AcademicYearId", "TeacherId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClassTeacher", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("EssayQuestionAnswer", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayStudentAnswer", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EssayQuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeacherComments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId", "StudentId");

                    b.HasIndex("EssayQuestionAnswerId");

                    b.HasIndex("StudentId");

                    b.ToTable("EssayStudentAnswer", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.HeadOfDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("HeadOfDepartment", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LearningOutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("Lesson", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DuetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LessonAssignment", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonAssignmentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonAssignmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherComments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonAssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonAssignmentSubmission", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("MCQQuestionAnswer", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQQuestionStudentAnswer", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("MCQQuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int>("SequnceNo")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "StudentId", "MCQQuestionAnswerId");

                    b.HasIndex("MCQQuestionAnswerId");

                    b.HasIndex("StudentId");

                    b.ToTable("MCQQuestionStudentAnswer", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<int?>("StudentMCQQuestionQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentMCQQuestionStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LessonId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("StudentMCQQuestionQuestionId", "StudentMCQQuestionStudentId");

                    b.ToTable("Question", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", "Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Principle"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "LevelHead"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "HOD"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Student"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Parent"
                        });
                });

            modelBuilder.Entity("SchoolManagement.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AdmissionNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmegencyContactNo1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmegencyContactNo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionNo")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Student", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClass", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("StudentClass", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClassSubject", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassNameId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassNameId", "AcademicLevelId", "AcademicYearId", "SubjectId");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.ToTable("StudentClassSubject", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLesson", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentLessonStatus")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLesson", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLessonTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentLessonTopicStatus")
                        .HasColumnType("int");

                    b.HasKey("TopicId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLessonTopic", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLessonTopicContent", b =>
                {
                    b.Property<int>("TopicContentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentLessonTopicStatus")
                        .HasColumnType("int");

                    b.HasKey("TopicContentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLessonTopicContent", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentMCQQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeacherComments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMCQQuestion", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuscketSubject")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentBasketSubject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentBasketSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectCategory")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectStreamId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasAlternateKey("SubjectCode");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentBasketSubjectId");

                    b.HasIndex("SubjectStreamId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Subject", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectAcademicLevel", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "AcademicLevelId");

                    b.HasIndex("AcademicLevelId");

                    b.ToTable("SubjectAcademicLevel", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SubjectStream", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SubjectTeacher", "Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LearningExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Topic", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.TopicContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicContent", "Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginSessionId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ProfileImage")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("User", "Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 507, DateTimeKind.Utc).AddTicks(6327),
                            Email = "avdunusinghe@gmail.com",
                            FullName = "SuperAdmin",
                            IsActive = true,
                            LastLoginDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LoginSessionId = 0,
                            MobileNo = "0703375581",
                            Password = "HGnySkxIrdSxVCdICLWgVQxx",
                            ProfileImage = (byte)0,
                            UpdatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 507, DateTimeKind.Utc).AddTicks(6560),
                            Username = "avdunusinghe@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 507, DateTimeKind.Utc).AddTicks(7200),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            LastLoginDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LoginSessionId = 0,
                            MobileNo = "0112487086",
                            Password = "HGnySkxIrdSxVCdICLWgVQxx",
                            ProfileImage = (byte)0,
                            UpdatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 507, DateTimeKind.Utc).AddTicks(7201),
                            Username = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("SchoolManagement.Model.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("UserRole", "Account");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 518, DateTimeKind.Utc).AddTicks(4365),
                            IsActive = true,
                            UpdatedById = 1,
                            UpdatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 518, DateTimeKind.Utc).AddTicks(4771)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            CreatedById = 1,
                            CreatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 518, DateTimeKind.Utc).AddTicks(6077),
                            IsActive = true,
                            UpdatedById = 1,
                            UpdatedOn = new DateTime(2021, 10, 3, 22, 5, 30, 518, DateTimeKind.Utc).AddTicks(6079)
                        });
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicLevel", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedAcademicLevels")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "LevelHead")
                        .WithMany("LevelHeads")
                        .HasForeignKey("LevelHeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedAcademicLevels")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LevelHead");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicYear", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedAcademicYears")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedAcademicYears")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.Class", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.ClassName", "ClassName")
                        .WithMany("Classes")
                        .HasForeignKey("ClassNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("ClassName");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassName", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassNames")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassNames")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassSubjectTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassSubjectTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectTeacher", "SubjectTeacher")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("SubjectTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassSubjectTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("Subject");

                    b.Navigation("SubjectTeacher");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Teacher")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("Teacher");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayQuestionAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("EssayQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayStudentAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.EssayQuestionAnswer", "EssayQuestionAnswer")
                        .WithMany("EssayStudentAnswers")
                        .HasForeignKey("EssayQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("EssayStudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Student")
                        .WithMany("EssayStudentAnswers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EssayQuestionAnswer");

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Model.HeadOfDepartment", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedHeadOfDepartments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectTeacher", "SubjectTeacher")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedHeadOfDepartments")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedBy");

                    b.Navigation("Subject");

                    b.Navigation("SubjectTeacher");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.Lesson", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedLessons")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Owner")
                        .WithMany("OwnerLessons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedLessons")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "SubjectAcedemicLevel")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("Owner");

                    b.Navigation("SubjectAcedemicLevel");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonAssignment", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedLessonAssignments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("LessonAssignments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedLessonAssignments")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Lesson");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonAssignmentSubmission", b =>
                {
                    b.HasOne("SchoolManagement.Model.LessonAssignment", "LessonAssignment")
                        .WithMany("LessonAssignmentSubmissions")
                        .HasForeignKey("LessonAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("LessonAssignmentSubmissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LessonAssignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQQuestionAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("MCQQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQQuestionStudentAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.MCQQuestionAnswer", "MCQQuestionAnswer")
                        .WithMany("MCQQuestionStudentAnswers")
                        .HasForeignKey("MCQQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Question", null)
                        .WithMany("MCQQuestionStudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Student", null)
                        .WithMany("MCQQuestionStudentAnswers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.StudentMCQQuestion", "StudentMCQQuestion")
                        .WithMany("MCQQuestionStudentAnswers")
                        .HasForeignKey("QuestionId", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MCQQuestionAnswer");

                    b.Navigation("StudentMCQQuestion");
                });

            modelBuilder.Entity("SchoolManagement.Model.Question", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedQuestions")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.StudentMCQQuestion", null)
                        .WithMany("Questions")
                        .HasForeignKey("StudentMCQQuestionQuestionId", "StudentMCQQuestionStudentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lesson");

                    b.Navigation("Topic");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.Student", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedStudents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SchoolManagement.Model.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedStudents")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClass", b =>
                {
                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClassSubject", b =>
                {
                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "SubjectAcademicLevel")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.StudentClass", "StudentClass")
                        .WithMany("StudentClassSubjects")
                        .HasForeignKey("StudentId", "ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentClass");

                    b.Navigation("SubjectAcademicLevel");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLesson", b =>
                {
                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLessonTopic", b =>
                {
                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentLessonTopics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("StudentLessonTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLessonTopicContent", b =>
                {
                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentLessonTopicContents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.TopicContent", "TopicContent")
                        .WithMany("StudentLessonTopicContents")
                        .HasForeignKey("TopicContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TopicContent");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentMCQQuestion", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("StudentMCQQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentMCQQuestions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagement.Model.Subject", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedSubjects")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "PerentSubject")
                        .WithMany("ChildBasketSubjects")
                        .HasForeignKey("ParentBasketSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.SubjectStream", "SubjectStream")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectStreamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedSubjects")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("PerentSubject");

                    b.Navigation("SubjectStream");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectAcademicLevel", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("SubjectAcademicLevels")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("SubjectAcademicLevels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectStream", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedSubjectStreams")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedSubjectStreams")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedSubjectTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Teacher")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedSubjectTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedBy");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.Topic", b =>
                {
                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("Topics")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.TopicContent", b =>
                {
                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("TopicContents")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SchoolManagement.Model.User", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolManagement.Model.UserRole", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedUserRoles")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicLevel", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("HeadOfDepartments");

                    b.Navigation("SubjectAcademicLevels");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicYear", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("HeadOfDepartments");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("SchoolManagement.Model.Class", b =>
                {
                    b.Navigation("ClassSubjectTeachers");

                    b.Navigation("ClassTeachers");

                    b.Navigation("Lessons");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassName", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayQuestionAnswer", b =>
                {
                    b.Navigation("EssayStudentAnswers");
                });

            modelBuilder.Entity("SchoolManagement.Model.Lesson", b =>
                {
                    b.Navigation("LessonAssignments");

                    b.Navigation("Questions");

                    b.Navigation("StudentLessons");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonAssignment", b =>
                {
                    b.Navigation("LessonAssignmentSubmissions");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQQuestionAnswer", b =>
                {
                    b.Navigation("MCQQuestionStudentAnswers");
                });

            modelBuilder.Entity("SchoolManagement.Model.Question", b =>
                {
                    b.Navigation("EssayQuestionAnswers");

                    b.Navigation("EssayStudentAnswers");

                    b.Navigation("MCQQuestionAnswers");

                    b.Navigation("MCQQuestionStudentAnswers");

                    b.Navigation("StudentMCQQuestions");
                });

            modelBuilder.Entity("SchoolManagement.Model.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchoolManagement.Model.Student", b =>
                {
                    b.Navigation("LessonAssignmentSubmissions");

                    b.Navigation("MCQQuestionStudentAnswers");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentLessons");

                    b.Navigation("StudentLessonTopicContents");

                    b.Navigation("StudentLessonTopics");

                    b.Navigation("StudentMCQQuestions");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClass", b =>
                {
                    b.Navigation("StudentClassSubjects");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentMCQQuestion", b =>
                {
                    b.Navigation("MCQQuestionStudentAnswers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SchoolManagement.Model.Subject", b =>
                {
                    b.Navigation("ChildBasketSubjects");

                    b.Navigation("ClassSubjectTeachers");

                    b.Navigation("HeadOfDepartments");

                    b.Navigation("SubjectAcademicLevels");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectAcademicLevel", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("StudentClassSubjects");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectStream", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectTeacher", b =>
                {
                    b.Navigation("ClassSubjectTeachers");

                    b.Navigation("HeadOfDepartments");
                });

            modelBuilder.Entity("SchoolManagement.Model.Topic", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentLessonTopics");

                    b.Navigation("TopicContents");
                });

            modelBuilder.Entity("SchoolManagement.Model.TopicContent", b =>
                {
                    b.Navigation("StudentLessonTopicContents");
                });

            modelBuilder.Entity("SchoolManagement.Model.User", b =>
                {
                    b.Navigation("ClassTeachers");

                    b.Navigation("CreatedAcademicLevels");

                    b.Navigation("CreatedAcademicYears");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedClassNames");

                    b.Navigation("CreatedClassSubjectTeachers");

                    b.Navigation("CreatedClassTeachers");

                    b.Navigation("CreatedHeadOfDepartments");

                    b.Navigation("CreatedLessonAssignments");

                    b.Navigation("CreatedLessons");

                    b.Navigation("CreatedQuestions");

                    b.Navigation("CreatedStudents");

                    b.Navigation("CreatedSubjects");

                    b.Navigation("CreatedSubjectStreams");

                    b.Navigation("CreatedSubjectTeachers");

                    b.Navigation("CreatedUserRoles");

                    b.Navigation("CreatedUsers");

                    b.Navigation("EssayStudentAnswers");

                    b.Navigation("LevelHeads");

                    b.Navigation("OwnerLessons");

                    b.Navigation("Student");

                    b.Navigation("SubjectTeachers");

                    b.Navigation("UpdatedAcademicLevels");

                    b.Navigation("UpdatedAcademicYears");

                    b.Navigation("UpdatedClasses");

                    b.Navigation("UpdatedClassNames");

                    b.Navigation("UpdatedClassSubjectTeachers");

                    b.Navigation("UpdatedClassTeachers");

                    b.Navigation("UpdatedHeadOfDepartments");

                    b.Navigation("UpdatedLessonAssignments");

                    b.Navigation("UpdatedLessons");

                    b.Navigation("UpdatedQuestions");

                    b.Navigation("UpdatedStudents");

                    b.Navigation("UpdatedSubjects");

                    b.Navigation("UpdatedSubjectStreams");

                    b.Navigation("UpdatedSubjectTeachers");

                    b.Navigation("UpdatedUserRoles");

                    b.Navigation("UpdatedUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
